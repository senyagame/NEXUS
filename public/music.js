// music.js

import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-app.js";
import { getFirestore, doc, getDoc, setDoc, updateDoc, arrayUnion, arrayRemove } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore.js";
import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-auth.js";

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (—Å–µ–∫—É–Ω–¥—ã –≤ MM:SS) ---
export function formatTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
}

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–ª–µ–µ—Ä–∞ ---
export function initializeCustomPlayer(container) {
    const playPauseBtn = container.querySelector('.play-pause-btn');
    const progressBar = container.querySelector('.custom-progress-bar');
    const currentTimeSpan = container.querySelector('.current-time');
    const totalDurationSpan = container.querySelector('.total-duration');
    const audio = container.querySelector('audio');
    const nexusPlayerTitle = container.querySelector('.nexus-player-title');
    const favoriteHeartBtn = container.querySelector('.favorite-heart-btn'); // –ù–ê–®–ï –°–ï–†–î–ï–ß–ö–û

    let isPlaying = false;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const songDurationStr = container.dataset.duration;
    if (songDurationStr) {
        const [minutes, seconds] = songDurationStr.split(':').map(Number);
        const initialTotalDuration = (minutes * 60) + seconds;
        if (totalDurationSpan) {
            totalDurationSpan.textContent = songDurationStr;
        }
        if (progressBar) {
            progressBar.max = initialTotalDuration;
        }
    } else {
        if (totalDurationSpan) {
            totalDurationSpan.textContent = '0:00';
        }
    }

    if (audio) {
        if (audio.readyState >= 2) {
            if (progressBar) progressBar.max = audio.duration;
            if (totalDurationSpan) totalDurationSpan.textContent = formatTime(audio.duration);
        } else {
            audio.addEventListener('loadedmetadata', () => {
                if (progressBar) progressBar.max = audio.duration;
                if (totalDurationSpan) totalDurationSpan.textContent = formatTime(audio.duration);
            });
        }
        
        if (playPauseBtn) {
            playPauseBtn.addEventListener('click', () => {
                if (isPlaying) {
                    audio.pause();
                    playPauseBtn.textContent = '‚ñ∂';
                    if (nexusPlayerTitle) nexusPlayerTitle.style.display = 'block';
                } else {
                    document.querySelectorAll('audio').forEach(otherAudio => {
                        if (otherAudio !== audio && !otherAudio.paused) {
                            otherAudio.pause();
                            const otherContainer = otherAudio.closest('.music-container');
                            if (otherContainer) {
                                const otherPlayPauseBtn = otherContainer.querySelector('.play-pause-btn');
                                const otherNexusPlayerTitle = otherContainer.querySelector('.nexus-player-title');
                                
                                if (otherPlayPauseBtn) otherPlayPauseBtn.textContent = '‚ñ∂';
                                if (otherNexusPlayerTitle) otherNexusPlayerTitle.style.display = 'block';
                            }
                        }
                    });

                    audio.play();
                    playPauseBtn.textContent = '‚è∏';
                    if (nexusPlayerTitle) nexusPlayerTitle.style.display = 'none';
                }
                isPlaying = !isPlaying;
            });
        }

        audio.addEventListener('timeupdate', () => {
            if (progressBar) progressBar.value = audio.currentTime;
            if (currentTimeSpan) currentTimeSpan.textContent = formatTime(audio.currentTime);
        });

        if (progressBar) {
            progressBar.addEventListener('input', () => {
                audio.currentTime = progressBar.value;
            });
        }

        audio.addEventListener('ended', () => {
            if (playPauseBtn) playPauseBtn.textContent = '‚ñ∂';
            isPlaying = false;
            if (progressBar) progressBar.value = 0;
            if (currentTimeSpan) currentTimeSpan.textContent = '0:00';
            if (nexusPlayerTitle) nexusPlayerTitle.style.display = 'block';
        });
    } else {
        console.warn('Audio element not found or invalid in container:', container);
        if (playPauseBtn) {
            playPauseBtn.textContent = '‚õî';
            playPauseBtn.disabled = true;
            playPauseBtn.title = '–õ–æ–∫–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω';
        }
        if (progressBar) progressBar.style.display = 'none';
        if (currentTimeSpan) currentTimeSpan.style.display = 'none';
        if (totalDurationSpan) totalDurationSpan.style.display = 'none';
    }
}

// --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ DOMContentLoaded –¥–ª—è music.js ---
document.addEventListener("DOMContentLoaded", async function () {
    const firebaseConfig = {
        apiKey: "AIzaSyBIF6s94-IuXl3accPXPQzVYWYciO5D5lg",
        authDomain: "super-app-1872b.firebaseapp.com",
        projectId: "super-app-1872b",
        storageBucket: "super-app-1872b.appspot.com",
        messagingSenderId: "19947702298",
        appId: "1:19947702298:web:6d962472fbb3a92b5c69a3",
        measurementId: "G-5PMEEJFMDT"
    };

    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    const auth = getAuth(app);

    let currentUserId = null;

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (—Ç–µ–ø–µ—Ä—å —Å–µ—Ä–¥–µ—á–∫–æ–º) ---

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–¥–µ—á–∫–∞
    async function updateFavoriteHeartState(heartButton, songData) {
        if (!currentUserId) {
            heartButton.textContent = 'üîí'; // –ó–∞–º–æ–∫, –µ—Å–ª–∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
            heartButton.disabled = true;
            heartButton.title = '–í–æ–π–¥–∏—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
            heartButton.classList.remove("is-favorite");
            return;
        }
        
        heartButton.disabled = false; // –†–∞–∑—Ä–µ—à–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
        heartButton.title = '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';

        const userFavoritesRef = doc(db, "favorites", currentUserId);
        try {
            const docSnap = await getDoc(userFavoritesRef);
            if (docSnap.exists()) {
                const favorites = docSnap.data().tracks || [];
                // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞: –ø–æ song, artist, –∏ yandexLink
                const isFavorite = favorites.some(fav =>
                    fav.song === songData.song &&
                    fav.artist === songData.artist &&
                    fav.yandexLink === songData.yandexLink
                );
                if (isFavorite) {
                    heartButton.textContent = '‚ù§Ô∏è'; // –ö—Ä–∞—Å–Ω–æ–µ —Å–µ—Ä–¥–µ—á–∫–æ
                    heartButton.classList.add("is-favorite");
                    heartButton.title = '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ';
                } else {
                    heartButton.textContent = 'ü§ç'; // –ë–µ–ª–æ–µ —Å–µ—Ä–¥–µ—á–∫–æ
                    heartButton.classList.remove("is-favorite");
                    heartButton.title = '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
                }
            } else {
                heartButton.textContent = 'ü§ç'; // –ë–µ–ª–æ–µ —Å–µ—Ä–¥–µ—á–∫–æ
                heartButton.classList.remove("is-favorite");
                heartButton.title = '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:", error);
            heartButton.textContent = '‚ùì'; // –ó–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            heartButton.disabled = true;
            heartButton.title = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ';
        }
    }

    async function toggleFavorite(heartButton, songData) {
        if (!currentUserId) {
            alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å —Ç—Ä–µ–∫–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.");
            return;
        }

        const userFavoritesRef = doc(db, "favorites", currentUserId);
        try {
            const docSnap = await getDoc(userFavoritesRef);
            let favorites = docSnap.exists() ? docSnap.data().tracks || [] : [];
            
            const isFavorite = favorites.some(fav =>
                fav.song === songData.song &&
                fav.artist === songData.artist &&
                fav.yandexLink === songData.yandexLink
            );

            if (isFavorite) {
                // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                await updateDoc(userFavoritesRef, {
                    tracks: arrayRemove(songData)
                });
                alert(`${songData.song} —É–¥–∞–ª–µ–Ω –∏–∑ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è.`);
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                if (docSnap.exists()) {
                    await updateDoc(userFavoritesRef, {
                        tracks: arrayUnion(songData)
                    });
                } else {
                    // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –ø–µ—Ä–≤—ã–º —Ç—Ä–µ–∫–æ–º
                    await setDoc(userFavoritesRef, { tracks: [songData] });
                }
                alert(`${songData.song} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è!`);
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–¥–µ—á–∫–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await updateFavoriteHeartState(heartButton, songData);

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:", error);
            alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.");
        }
    }

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–µ–µ—Ä–æ–≤ –∏ —Å–µ—Ä–¥–µ—á–µ–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ ---
    const musicContainers = document.querySelectorAll('.music-container');
    musicContainers.forEach(container => {
        initializeCustomPlayer(container); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–µ–µ—Ä

        const favoriteHeartBtn = container.querySelector('.favorite-heart-btn');
        if (favoriteHeartBtn) {
            const songData = {
                song: container.dataset.song,
                artist: container.dataset.artist,
                date: container.dataset.date,
                duration: container.dataset.duration,
                img: container.dataset.img,
                yandexLink: container.dataset.yandexLink,
                audioSrc: container.dataset.audioSrc
            };

            // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–¥–µ—á–∫–∞
            // –≠—Ç–æ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–æ –ø–æ—Å–ª–µ onAuthStateChanged, –∫–æ–≥–¥–∞ currentUserId –±—É–¥–µ—Ç –∏–∑–≤–µ—Å—Ç–µ–Ω
            // –ò–ª–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ.
            // –ü–æ—ç—Ç–æ–º—É –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º, –∞ –∂–¥–µ–º onAuthStateChanged.

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π
            favoriteHeartBtn.addEventListener('click', () => toggleFavorite(favoriteHeartBtn, songData));
        }
    });

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Firebase ---
    onAuthStateChanged(auth, async (user) => {
        if (user) {
            currentUserId = user.uid;
            console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª. UID:", currentUserId);
            // –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–¥–µ—á–µ–∫
            musicContainers.forEach(async (container) => {
                const favoriteHeartBtn = container.querySelector('.favorite-heart-btn');
                if (favoriteHeartBtn) {
                    const songData = {
                        song: container.dataset.song,
                        artist: container.dataset.artist,
                        yandexLink: container.dataset.yandexLink // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                    };
                    await updateFavoriteHeartState(favoriteHeartBtn, songData);
                }
            });
        } else {
            currentUserId = null;
            console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–æ—à–µ–ª.");
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª, —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ —Å–µ—Ä–¥–µ—á–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏/—Å–µ—Ä—ã–º–∏
            musicContainers.forEach(heartBtn => {
                const favoriteHeartBtn = heartBtn.querySelector('.favorite-heart-btn');
                if (favoriteHeartBtn) {
                    favoriteHeartBtn.textContent = 'üîí';
                    favoriteHeartBtn.disabled = true;
                    favoriteHeartBtn.title = '–í–æ–π–¥–∏—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
                    favoriteHeartBtn.classList.remove("is-favorite");
                }
            });
        }
    });
});